{"version":3,"sources":["components/TaskInputForm.jsx","components/ListItem.jsx","components/ToDoTaskList.jsx","components/ToDoListView.jsx","App.js","serviceWorker.js","index.js"],"names":["TaskInputForm","value","onSubmit","onChange","styles","rows","display","flexDirection","justifyContent","margin","inputSpacing","width","buttonSpacing","marginLeft","style","type","id","placeholder","className","onClick","ListItem","task","complete","onComplete","onDelete","itemContainer","padding","backgroundColor","borderRadius","textContainer","name","ToDoTaskList","tasksList","tasks","filter","t","done","map","key","ToDoListView","props","columns","header","textAlign","error","color","useState","setTasks","taskName","setTaskName","setError","handleCompleteTask","taskID","event","singleTask","find","tempTask","newTaskList","handleDeleteTask","tempTasks","uuid","target","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.3e9a4224.chunk.js","sourcesContent":["import React from \"react\";\n\nconst TaskInputForm = ({ value, onSubmit, onChange }) => {\n  const styles = {\n    rows: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      justifyContent: \"space-around\",\n      margin: 10,\n    },\n    inputSpacing: {\n      width: 400,\n    },\n    buttonSpacing: {\n      marginLeft: 5,\n    },\n  };\n\n  return (\n    <div style={styles.rows}>\n      <input\n        type=\"text\"\n        id=\"newTask\"\n        placeholder=\"New task\"\n        className=\"form-control form-control-lg\"\n        style={styles.inputSpacing}\n        value={value}\n        onChange={onChange}\n      />\n      <button\n        type=\"submit\"\n        className=\"btn btn-dark btn-lg\"\n        style={styles.buttonSpacing}\n        onClick={onSubmit}\n      >\n        Add\n      </button>\n    </div>\n  );\n};\n\nexport default TaskInputForm;\n","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst ListItem = ({ task, complete, onComplete, onDelete }) => {\n  // https://colorhunt.co/palette/196113\n  const styles = {\n    itemContainer: {\n      padding: 10,\n      margin: 5,\n      backgroundColor: \"#3282b8\",\n      borderRadius: 5,\n    },\n    textContainer: {\n      padding: 10,\n      margin: \"0px 2px 10px\",\n      backgroundColor: \"#bbe1fa\",\n      borderRadius: 5,\n    },\n    buttonSpacing: {\n      margin: 2,\n    },\n  };\n  return (\n    <div style={styles.itemContainer}>\n      <p style={styles.textContainer}>{task.name}</p>\n      <button\n        type=\"submit\"\n        className=\"btn btn-danger btn-sm\"\n        style={styles.buttonSpacing}\n        onClick={onDelete(task.id)}\n      >\n        Delete\n      </button>\n      {!complete ? (\n        <button\n          type=\"submit\"\n          className=\"btn btn-success btn-sm\"\n          style={styles.buttonSpacing}\n          onClick={onComplete(task.id, true)}\n        >\n          Complete\n        </button>\n      ) : (\n        <button\n          type=\"submit\"\n          className=\"btn btn-secondary btn-sm\"\n          style={styles.buttonSpacing}\n          onClick={onComplete(task.id, false)}\n        >\n          Uncomplete\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default ListItem;\n","import React from \"react\";\nimport ListItem from \"./ListItem\";\n\nconst ToDoTaskList = ({ tasks, onComplete, onDelete, complete = false }) => {\n  const styles = {\n    flexContainer: {\n      display: \"flex\",\n      flexDirection: \"column\",\n    },\n  };\n  let tasksList;\n  if (complete) {\n    tasksList = tasks.filter((t) => {\n      return t.done;\n    });\n  } else {\n    tasksList = tasks.filter((t) => {\n      return !t.done;\n    });\n  }\n\n  return (\n    <div className={styles.flexContainer}>\n      {tasksList.map((task) => {\n        return (\n          <ListItem\n            key={task.id}\n            task={task}\n            onComplete={onComplete}\n            onDelete={onDelete}\n            complete={complete}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default ToDoTaskList;\n","import React, { useState } from \"react\";\nimport uuid from \"react-uuid\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport TaskInputForm from \"./TaskInputForm\";\nimport ToDoTaskList from \"./ToDoTaskList\";\n\nconst ToDoListView = (props) => {\n  const styles = {\n    columns: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      width: 600,\n      margin: \"auto\",\n    },\n    rows: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      justifyContent: \"space-around\",\n      margin: 10,\n    },\n    header: {\n      textAlign: \"center\",\n    },\n    error: {\n      color: \"red\",\n    },\n  };\n\n  const [tasks, setTasks] = useState([]);\n\n  const [taskName, setTaskName] = useState(\"\");\n\n  const [error, setError] = useState(\"\");\n\n  const handleChangeTaskName = (event) => {\n    setTaskName(event.target.value);\n  };\n\n  const handleCreateNewTask = (event) => {\n    if (taskName === \"\") {\n      setError(\"Please Enter a Task\");\n    } else {\n      const tempTask = {\n        id: uuid(),\n        name: taskName,\n        done: false,\n      };\n\n      setTasks([...tasks, tempTask]);\n      setTaskName(\"\");\n      setError(\"\");\n    }\n  };\n\n  const handleCompleteTask = (taskID, complete) => (event) => {\n    const singleTask = tasks.find((t) => {\n      return t.id === taskID;\n    });\n\n    const tempTask = {\n      id: singleTask.id,\n      name: singleTask.name,\n      done: complete ? true : false,\n    };\n\n    const newTaskList = tasks.map((t) => {\n      return t.id === taskID ? tempTask : t;\n    });\n\n    setTasks(newTaskList);\n  };\n\n  const handleDeleteTask = (taskID) => (event) => {\n    const tempTasks = tasks.filter((t) => {\n      return t.id !== taskID;\n    });\n\n    setTasks(tempTasks);\n  };\n\n  return (\n    <div style={styles.columns}>\n      <h1 style={styles.header}>Task List</h1>\n      <div style={styles.rows}>\n        <TaskInputForm\n          value={taskName}\n          onSubmit={handleCreateNewTask}\n          onChange={handleChangeTaskName}\n        />\n        {error && <p style={styles.error}>{error}</p>}\n      </div>\n      <div style={styles.rows}>\n        <div>\n          <h2 style={styles.header}>To Do</h2>\n          <ToDoTaskList\n            tasks={tasks}\n            onComplete={handleCompleteTask}\n            onDelete={handleDeleteTask}\n            complete={false}\n          />\n        </div>\n        <div>\n          <h2 style={styles.header}>Completed</h2>\n          <ToDoTaskList\n            tasks={tasks}\n            onComplete={handleCompleteTask}\n            onDelete={handleDeleteTask}\n            complete={true}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ToDoListView;\n","import React from \"react\";\nimport ToDoListView from \"./components/ToDoListView\";\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <ToDoListView />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}